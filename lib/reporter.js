// Generated by CoffeeScript 1.6.3
(function() {
  var Reporter, TypeError, pj, render,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  pj = (function() {
    try {
      return require('prettyjson');
    } catch (_error) {}
  })();

  render = function(obj) {
    return pj != null ? pj.render(obj) : void 0;
  };

  TypeError = require('./type-helpers').TypeError;

  Reporter = (function() {
    function Reporter() {
      this.add_warning = __bind(this.add_warning, this);
      this.add_error = __bind(this.add_error, this);
      this.errors = [];
      this.warnings = [];
    }

    Reporter.prototype.has_errors = function() {
      return this.errors.length > 0;
    };

    Reporter.prototype.has_warnings = function() {
      return this.warnings.length > 0;
    };

    Reporter.prototype.report = function() {
      var errors;
      errors = this.errors.map(function(_arg) {
        var node, text;
        node = _arg[0], text = _arg[1];
        return "" + text + "\n  at | " + node.raw;
      });
      return "[Error]\n" + (errors.join('\n'));
    };

    Reporter.prototype.add_error = function(node, text) {
      return this.errors.push([node, text]);
    };

    Reporter.prototype.add_warning = function() {
      var node, ws;
      node = arguments[0], ws = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.warnings.push([node, ws.join('')]);
    };

    Reporter.prototype.dump = function(node, prefix) {
      var key, next, val, _i, _len, _ref, _ref1, _results;
      if (prefix == null) {
        prefix = '';
      }
      console.log(prefix + ("[" + node.name + "]"));
      _ref = node._vars;
      for (key in _ref) {
        val = _ref[key];
        console.log(prefix, ' +', key, '::', JSON.stringify(val));
      }
      _ref1 = node.nodes;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        next = _ref1[_i];
        _results.push(this.dump(next, prefix + '  '));
      }
      return _results;
    };

    return Reporter;

  })();

  module.exports = new Reporter;

}).call(this);
