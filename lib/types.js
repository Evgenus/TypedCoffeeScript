// Generated by CoffeeScript 1.6.3
(function() {
  var ArrayType, ObjectType, Possibilites, Scope, Type, TypeSymbol, VarSymbol, checkAcceptableObject, clone, console, initializeGlobalTypes, pj, render, reporter, rewrite, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  console = {
    log: function() {}
  };

  pj = (function() {
    try {
      return require('prettyjson');
    } catch (_error) {}
  })();

  render = function(obj) {
    return pj != null ? pj.render(obj) : void 0;
  };

  _ref = require('./type-helpers'), clone = _ref.clone, rewrite = _ref.rewrite;

  reporter = require('./reporter');

  Type = (function() {
    function Type() {}

    return Type;

  })();

  ObjectType = (function(_super) {
    __extends(ObjectType, _super);

    function ObjectType(type) {
      this.type = type;
    }

    return ObjectType;

  })(Type);

  ArrayType = (function(_super) {
    __extends(ArrayType, _super);

    function ArrayType(type) {
      this.array = type;
    }

    return ArrayType;

  })(Type);

  Possibilites = (function(_super) {
    __extends(Possibilites, _super);

    function Possibilites(arr) {
      var i, _i, _len;
      if (arr == null) {
        arr = [];
      }
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        this.push(i);
      }
    }

    return Possibilites;

  })(Array);

  checkAcceptableObject = function(left, right) {
    var i, key, l_arg, lval, r, results;
    if (((left != null ? left._base_ : void 0) != null) && (left._templates_ != null)) {
      left = left._base_;
    }
    console.log('checkAcceptableObject /', left, right);
    if ((right != null ? right.possibilities : void 0) != null) {
      results = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = right.possibilities;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          r = _ref1[_i];
          _results.push(checkAcceptableObject(left, r));
        }
        return _results;
      })();
      return (results.every(function(i) {
        return !i;
      }) ? false : results.filter(function(i) {
        return i;
      }).join('\n'));
    }
    if (left === 'Any') {
      return false;
    }
    if (left != null ? left._args_ : void 0) {
      if (left === void 0 || left === 'Any') {
        return;
      }
      if (left._args_ == null) {
        left._args_ = [];
      }
      results = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = left._args_;
        _results = [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          l_arg = _ref1[i];
          _results.push(checkAcceptableObject(l_arg, right._args_[i]));
        }
        return _results;
      })();
      return (results.every(function(i) {
        return !i;
      }) ? false : results.filter(function(i) {
        return i;
      }).join('\n'));
      if (right._return_ !== 'Any') {
        return checkAcceptableObject(left._return_, right._return_);
      }
      return false;
    }
    if ((left != null ? left.array : void 0) != null) {
      if (right.array instanceof Array) {
        results = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = right.array;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            r = _ref1[_i];
            _results.push(checkAcceptableObject(left.array, r));
          }
          return _results;
        })();
        return (results.every(function(i) {
          return !i;
        }) ? false : results.filter(function(i) {
          return i;
        }).join('\n'));
      } else {
        return checkAcceptableObject(left.array, right.array);
      }
    } else if ((right != null ? right.array : void 0) != null) {
      if (left === 'Array' || left === 'Any' || left === void 0) {
        return false;
      } else {
        return "object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right));
      }
    } else if (((typeof left) === 'string') && ((typeof right) === 'string')) {
      if ((left === right) || (left === 'Any') || (right === 'Any')) {
        return false;
      } else {
        return "object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right));
      }
    } else if (((typeof left) === 'object') && ((typeof right) === 'object')) {
      results = (function() {
        var _results;
        _results = [];
        for (key in left) {
          lval = left[key];
          if (right[key] === void 0 && (lval != null) && !(key === '_return_' || key === 'type' || key === 'possibilities')) {
            _results.push("'" + key + "' is not defined on right");
          } else {
            _results.push(checkAcceptableObject(lval, right[key]));
          }
        }
        return _results;
      })();
      return (results.every(function(i) {
        return !i;
      }) ? false : results.filter(function(i) {
        return i;
      }).join('\n'));
    } else if ((left === void 0) || (right === void 0)) {
      return false;
    } else {
      return "object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right));
    }
  };

  initializeGlobalTypes = function(node) {
    node.addTypeObject('String', new TypeSymbol({
      type: 'String'
    }));
    node.addTypeObject('Number', new TypeSymbol({
      type: 'Number'
    }));
    node.addTypeObject('Boolean', new TypeSymbol({
      type: 'Boolean'
    }));
    node.addTypeObject('Object', new TypeSymbol({
      type: 'Object'
    }));
    node.addTypeObject('Array', new TypeSymbol({
      type: 'Array'
    }));
    node.addTypeObject('Undefined', new TypeSymbol({
      type: 'Undefined'
    }));
    return node.addTypeObject('Any', new TypeSymbol({
      type: 'Any'
    }));
  };

  VarSymbol = (function() {
    function VarSymbol(_arg) {
      this.type = _arg.type, this.implicit = _arg.implicit;
    }

    return VarSymbol;

  })();

  TypeSymbol = (function() {
    function TypeSymbol(_arg) {
      this.type = _arg.type, this["instanceof"] = _arg["instanceof"], this._templates_ = _arg._templates_;
      if (this["instanceof"] == null) {
        this["instanceof"] = function(t) {
          return t instanceof this.constructor;
        };
      }
    }

    return TypeSymbol;

  })();

  Scope = (function() {
    function Scope(parent) {
      var _ref1;
      this.parent = parent != null ? parent : null;
      this.extendTypeLiteral = __bind(this.extendTypeLiteral, this);
      if ((_ref1 = this.parent) != null) {
        _ref1.nodes.push(this);
      }
      this.name = '';
      this.nodes = [];
      this._vars = {};
      this._types = {};
      this._this = {};
      this._returnables = [];
    }

    Scope.prototype.addReturnable = function(symbol, type) {
      return this._returnables.push(type);
    };

    Scope.prototype.getReturnables = function() {
      return this._returnables;
    };

    Scope.prototype.addType = function(symbol, type, _templates_) {
      return this._types[symbol] = new TypeSymbol({
        type: type,
        _templates_: _templates_
      });
    };

    Scope.prototype.addTypeObject = function(symbol, type_object) {
      return this._types[symbol] = type_object;
    };

    Scope.prototype.getType = function(symbol) {
      return this._types[symbol];
    };

    Scope.prototype.getTypeInScope = function(symbol) {
      var _ref1;
      return this.getType(symbol) || ((_ref1 = this.parent) != null ? _ref1.getTypeInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.addThis = function(symbol, type, implicit) {
      if (implicit == null) {
        implicit = true;
      }
      return this._this[symbol] = {
        type: type,
        implicit: implicit
      };
    };

    Scope.prototype.getThis = function(symbol) {
      return this._this[symbol];
    };

    Scope.prototype.addVar = function(symbol, type, implicit) {
      var T, n, obj, replacer, rewrite_to, t, _i, _len, _ref1;
      if (implicit == null) {
        implicit = true;
      }
      console.log('addvar;', symbol, type);
      if ((type != null ? type._base_ : void 0) != null) {
        T = this.getType(type._base_);
        if (!T) {
          return void 0;
        }
        obj = clone(T.type);
        if (T._templates_) {
          rewrite_to = type._templates_;
          replacer = {};
          _ref1 = T._templates_;
          for (n = _i = 0, _len = _ref1.length; _i < _len; n = ++_i) {
            t = _ref1[n];
            replacer[t] = rewrite_to[n];
          }
          rewrite(obj, replacer);
        }
        return this._vars[symbol] = new VarSymbol({
          type: obj,
          implicit: implicit
        });
      } else {
        return this._vars[symbol] = new VarSymbol({
          type: type,
          implicit: implicit
        });
      }
    };

    Scope.prototype.getVar = function(symbol) {
      return this._vars[symbol];
    };

    Scope.prototype.getVarInScope = function(symbol) {
      var _ref1;
      return this.getVar(symbol) || ((_ref1 = this.parent) != null ? _ref1.getVarInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.isImplicitVar = function(symbol) {
      var _ref1;
      return !!((_ref1 = this._vars[symbol]) != null ? _ref1.implicit : void 0);
    };

    Scope.prototype.isImplicitVarInScope = function(symbol) {
      var _ref1;
      return this.isImplicitVar(symbol) || ((_ref1 = this.parent) != null ? _ref1.isImplicitVarInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.extendTypeLiteral = function(node) {
      var i, key, ret, type, val;
      switch (typeof node) {
        case 'object':
          if (node instanceof Array) {
            return (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = node.length; _i < _len; _i++) {
                i = node[_i];
                _results.push(this.extendTypeLiteral(i));
              }
              return _results;
            }).call(this);
          } else {
            ret = {};
            for (key in node) {
              val = node[key];
              ret[key] = this.extendTypeLiteral(val);
            }
            return ret;
          }
          break;
        case 'string':
          Type = this.getTypeInScope(node);
          type = Type != null ? Type.type : void 0;
          switch (typeof type) {
            case 'object':
              return this.extendTypeLiteral(type);
            case 'string':
              return type;
          }
      }
    };

    Scope.prototype.checkAcceptableObject = function(left, right) {
      var l, r;
      l = this.extendTypeLiteral(left);
      r = this.extendTypeLiteral(right);
      return checkAcceptableObject(l, r);
    };

    return Scope;

  })();

  module.exports = {
    checkAcceptableObject: checkAcceptableObject,
    initializeGlobalTypes: initializeGlobalTypes,
    VarSymbol: VarSymbol,
    TypeSymbol: TypeSymbol,
    Scope: Scope,
    ArrayType: ArrayType,
    ObjectType: ObjectType,
    Type: Type,
    Possibilites: Possibilites
  };

}).call(this);
