// Generated by CoffeeScript 1.6.3
(function() {
  var ArrayInterface, ArrayType, CS, NumberInterface, ObjectInterface, ObjectType, Possibilites, Scope, Type, TypeSymbol, VarSymbol, checkAcceptableObject, initializeGlobalTypes, pj, render, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pj = (function() {
    try {
      return require('prettyjson');
    } catch (_error) {}
  })();

  render = function(obj) {
    return pj != null ? pj.render(obj) : void 0;
  };

  CS = require('./nodes');

  util = require('util');

  NumberInterface = function() {
    return {
      toString: {
        name: 'function',
        args: [],
        returns: 'String'
      }
    };
  };

  ArrayInterface = function(T) {
    if (T == null) {
      T = 'Any';
    }
    return {
      length: 'Number',
      push: {
        name: 'function',
        args: [T],
        returns: 'void'
      },
      unshift: {
        name: 'function',
        args: [T],
        returns: 'void'
      },
      shift: {
        name: 'function',
        args: [],
        returns: T
      },
      toString: {
        name: 'function',
        args: [],
        returns: 'String'
      }
    };
  };

  ObjectInterface = function() {
    return {
      toString: {
        name: 'function',
        args: [],
        returns: 'String'
      },
      keys: {
        name: 'function',
        args: ['Any'],
        returns: {
          array: 'String'
        }
      }
    };
  };

  Type = (function() {
    function Type() {}

    return Type;

  })();

  ObjectType = (function(_super) {
    __extends(ObjectType, _super);

    function ObjectType(type) {
      this.type = type;
    }

    return ObjectType;

  })(Type);

  ArrayType = (function(_super) {
    __extends(ArrayType, _super);

    function ArrayType(type) {
      this.array = type;
    }

    return ArrayType;

  })(Type);

  Possibilites = (function(_super) {
    __extends(Possibilites, _super);

    function Possibilites(arr) {
      var i, _i, _len;
      if (arr == null) {
        arr = [];
      }
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        this.push(i);
      }
    }

    return Possibilites;

  })(Array);

  checkAcceptableObject = function(left, right) {
    var key, lval, r, _i, _j, _len, _len1, _ref, _ref1, _results;
    console.log('check', left, right);
    if ((right != null ? right.possibilities : void 0) != null) {
      console.log("--right---", right);
      _ref = right.possibilities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        checkAcceptableObject(left, r);
      }
      return;
    }
    if ((left != null ? left.array : void 0) != null) {
      if (right.array instanceof Array) {
        _ref1 = right.array;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          r = _ref1[_j];
          _results.push(checkAcceptableObject(left.array, r));
        }
        return _results;
      } else {
        return checkAcceptableObject(left.array, right.array);
      }
    } else if ((right != null ? right.array : void 0) != null) {
      if (left === 'Array' || left === 'Any' || left === void 0) {
        return 'ok';
      } else {
        throw new Error("object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right)));
      }
    } else if (((typeof left) === 'string') && ((typeof right) === 'string')) {
      if ((left === right) || (left === 'Any') || (right === 'Any')) {
        return 'ok';
      } else {
        throw new Error("object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right)));
      }
    } else if (((typeof left) === 'object') && ((typeof right) === 'object')) {
      for (key in left) {
        lval = left[key];
        if (right[key] === void 0) {
          if (key === 'returns' || key === 'type') {
            return;
          }
          throw new Error("'" + key + "' is not defined on right");
        }
        checkAcceptableObject(lval, right[key]);
      }
    } else if ((left === void 0) || (right === void 0)) {
      return "ignore now";
    } else {
      throw new Error("object deep equal mismatch " + (JSON.stringify(left)) + ", " + (JSON.stringify(right)));
    }
  };

  initializeGlobalTypes = function(node) {
    node.addTypeObject('String', new TypeSymbol({
      type: 'String',
      "instanceof": function(expr) {
        return (typeof expr.data) === 'string';
      }
    }));
    node.addTypeObject('Number', new TypeSymbol({
      type: 'Number',
      "instanceof": function(expr) {
        return (typeof expr.data) === 'number';
      }
    }));
    node.addTypeObject('Boolean', new TypeSymbol({
      type: 'Boolean',
      "instanceof": function(expr) {
        return (typeof expr.data) === 'boolean';
      }
    }));
    node.addTypeObject('Object', new TypeSymbol({
      type: 'Object',
      "instanceof": function(expr) {
        return (typeof expr.data) === 'object';
      }
    }));
    node.addTypeObject('Array', new TypeSymbol({
      type: 'Array',
      "instanceof": function(expr) {
        return (typeof expr.data) === 'object';
      }
    }));
    node.addTypeObject('Undefined', new TypeSymbol({
      type: 'Undefined'
    }));
    return node.addTypeObject('Any', new TypeSymbol({
      type: 'Any',
      "instanceof": function(expr) {
        return true;
      }
    }));
  };

  VarSymbol = (function() {
    function VarSymbol(_arg) {
      this.type = _arg.type, this.implicit = _arg.implicit;
    }

    return VarSymbol;

  })();

  TypeSymbol = (function() {
    function TypeSymbol(_arg) {
      this.type = _arg.type, this["instanceof"] = _arg["instanceof"];
      if (this["instanceof"] == null) {
        this["instanceof"] = function(t) {
          return t instanceof this.constructor;
        };
      }
    }

    return TypeSymbol;

  })();

  Scope = (function() {
    Scope.dump = function(node, prefix) {
      var key, next, val, _i, _len, _ref, _ref1, _results;
      if (prefix == null) {
        prefix = '';
      }
      console.log(prefix + ("[" + node.name + "]"));
      _ref = node._vars;
      for (key in _ref) {
        val = _ref[key];
        console.log(prefix, ' +', key, '::', val);
      }
      _ref1 = node.nodes;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        next = _ref1[_i];
        _results.push(Scope.dump(next, prefix + '  '));
      }
      return _results;
    };

    function Scope(parent) {
      var _ref;
      this.parent = parent != null ? parent : null;
      if ((_ref = this.parent) != null) {
        _ref.nodes.push(this);
      }
      this.name = '';
      this.nodes = [];
      this._vars = {};
      this._types = {};
      this._this = null;
      this._returnables = [];
    }

    Scope.prototype.addReturnable = function(symbol, type) {
      return this._returnables.push(type);
    };

    Scope.prototype.getReturnables = function() {
      return this._returnables;
    };

    Scope.prototype.addType = function(symbol, type) {
      return this._types[symbol] = new TypeSymbol({
        type: type
      });
    };

    Scope.prototype.addTypeObject = function(symbol, type_object) {
      return this._types[symbol] = type_object;
    };

    Scope.prototype.getType = function(symbol) {
      var _ref, _ref1;
      return (_ref = (_ref1 = this._types[symbol]) != null ? _ref1.type : void 0) != null ? _ref : void 0;
    };

    Scope.prototype.getTypeInScope = function(symbol) {
      var _ref;
      return this.getType(symbol) || ((_ref = this.parent) != null ? _ref.getTypeInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.addVar = function(symbol, type, implicit) {
      if (implicit == null) {
        implicit = true;
      }
      return this._vars[symbol] = new VarSymbol({
        type: type,
        implicit: implicit
      });
    };

    Scope.prototype.getVar = function(symbol) {
      var _ref, _ref1;
      return (_ref = (_ref1 = this._vars[symbol]) != null ? _ref1.type : void 0) != null ? _ref : void 0;
    };

    Scope.prototype.getVarInScope = function(symbol) {
      var _ref;
      return this.getVar(symbol) || ((_ref = this.parent) != null ? _ref.getVarInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.isImplicitVar = function(symbol) {
      var _ref;
      return !!((_ref = this._vars[symbol]) != null ? _ref.implicit : void 0);
    };

    Scope.prototype.isImplicitVarInScope = function(symbol) {
      var _ref;
      return this.isImplicitVar(symbol) || ((_ref = this.parent) != null ? _ref.isImplicitVarInScope(symbol) : void 0) || void 0;
    };

    Scope.prototype.extendTypeLiteral = function(node) {
      var i, key, ret, type, val;
      switch (typeof node) {
        case 'object':
          if (node instanceof Array) {
            return (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = node.length; _i < _len; _i++) {
                i = node[_i];
                _results.push(this.extendTypeLiteral(i));
              }
              return _results;
            }).call(this);
          } else {
            ret = {};
            for (key in node) {
              val = node[key];
              ret[key] = this.extendTypeLiteral(val);
            }
            return ret;
          }
          break;
        case 'string':
          type = this.getTypeInScope(node);
          switch (typeof type) {
            case 'object':
              return this.extendTypeLiteral(type);
            case 'string':
              return type;
          }
      }
    };

    Scope.prototype.checkAcceptableObject = function(left, right) {
      var l, r;
      l = this.extendTypeLiteral(left);
      r = this.extendTypeLiteral(right);
      return checkAcceptableObject(l, r);
    };

    Scope.prototype.checkFunctionLiteral = function(left, right) {
      var i, l_arg, r_arg, _i, _len, _ref;
      left = this.extendTypeLiteral(left);
      right = this.extendTypeLiteral(right);
      _ref = left.args;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        l_arg = _ref[i];
        r_arg = right.args[i];
        checkAcceptableObject(l_arg, r_arg);
      }
      if (right.returns !== 'Any') {
        return checkAcceptableObject(left.returns, right.returns);
      }
    };

    return Scope;

  })();

  module.exports = {
    checkAcceptableObject: checkAcceptableObject,
    initializeGlobalTypes: initializeGlobalTypes,
    VarSymbol: VarSymbol,
    TypeSymbol: TypeSymbol,
    Scope: Scope,
    ArrayType: ArrayType,
    ObjectType: ObjectType,
    Type: Type,
    Possibilites: Possibilites
  };

}).call(this);
