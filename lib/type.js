// Generated by CoffeeScript 1.6.3
(function() {
  var ScopeNode, TypeSymbol, checkNodes, console, guess_expr_type, _typecheck;

  console = {
    log: function() {}
  };

  TypeSymbol = (function() {
    function TypeSymbol(type) {
      this.type = type;
      this.type = Symbol;
    }

    return TypeSymbol;

  })();

  guess_expr_type = function(expr) {
    if ((typeof expr.data) === 'number') {
      return 'Number';
    } else if ((typeof expr.data) === 'string') {
      return 'String';
    } else if ((typeof expr.data) === 'boolean') {
      return 'Boolean';
    } else if ((expr.parameters != null) && (expr.body != null)) {
      return 'Function';
    } else {
      return 'Any';
    }
  };

  ScopeNode = (function() {
    function ScopeNode() {
      this.name = '';
      this.nodes = [];
      this.defs = {};
      this.parent = null;
    }

    ScopeNode.prototype.setType = function(symbol, type) {
      return this.defs[symbol] = type;
    };

    ScopeNode.prototype.getType = function(symbol) {
      return this.defs[symbol];
    };

    ScopeNode.prototype.getScopedType = function(symbol) {
      var _ref;
      return this.getType(symbol) || ((_ref = this.parent) != null ? _ref.getScopedType(symbol) : void 0) || void 0;
    };

    ScopeNode.dump = function(node, prefix) {
      var key, n, val, _i, _len, _ref, _ref1, _results;
      if (prefix == null) {
        prefix = '';
      }
      console.log(prefix + ("[" + node.name + "]"));
      _ref = node.defs;
      for (key in _ref) {
        val = _ref[key];
        console.log(prefix, ' +', key, '::', val);
      }
      _ref1 = node.nodes;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        n = _ref1[_i];
        _results.push(ScopeNode.dump(n, prefix + '  '));
      }
      return _results;
    };

    return ScopeNode;

  })();

  checkNodes = function(cs_ast) {
    var i, root, _i, _len, _ref, _ref1;
    if (((_ref = cs_ast.body) != null ? _ref.statements : void 0) == null) {
      return;
    }
    console.log(cs_ast.body.statements);
    console.log('=====================');
    root = new ScopeNode;
    root.name = 'root';
    _ref1 = ['global', 'exports', 'Module', 'module'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      root.defs[i] = 'Any';
    }
    _typecheck(cs_ast.body.statements, root);
    return ScopeNode.dump(root);
  };

  _typecheck = function(node, parentScope) {
    var assigned_type, assignee, body, expected, expression, fnode, infered_type, member, name, registered_type, snode, symbol, type, _ref, _ref1, _ref2;
    if (node === void 0) {
      return;
    }
    if (node.length != null) {
      node.forEach(function(s) {
        return _typecheck(s, parentScope);
      });
    } else if (guess_expr_type(node) === 'Function') {
      body = node.body;
      snode = new ScopeNode;
      snode.name = '-lambda-';
      snode.parent = parentScope;
      parentScope.nodes.push(snode);
      return _typecheck(body.statements, snode);
    } else if ((node.nameAssignee != null) && (node.body != null)) {
      body = node.body, name = node.name;
      snode = new ScopeNode;
      snode.name = name.data;
      snode.parent = parentScope;
      parentScope.nodes.push(snode);
      return _typecheck(body.statements, snode);
    } else if ((node["function"] != null) && (node["arguments"] != null)) {
      return _typecheck(node["arguments"], parentScope);
    } else if ((((_ref = node.assignee) != null ? _ref.memberName : void 0) != null) && (node.expression != null)) {
      symbol = node.assignee.expression.data;
      member = node.assignee.memberName;
      registered_type = parentScope.getScopedType(symbol);
      if (registered_type == null) {
        return;
      }
      type = registered_type[member];
      infered_type = guess_expr_type(node.expression);
      if ((type != null) && (type === infered_type) || (registered_type === 'Any')) {
        return '';
      } else {
        throw new Error("'" + symbol + "' is expected to " + registered_type + " (indeed " + infered_type + ") at member access");
      }
    } else if ((node.assignee != null) && (node.expression != null)) {
      assignee = node.assignee, expression = node.expression;
      symbol = assignee.data;
      registered_type = parentScope.getScopedType(symbol);
      infered_type = guess_expr_type(expression);
      assigned_type = (_ref1 = assignee.annotation) != null ? _ref1.type : void 0;
      if ((registered_type != null) && (assigned_type != null)) {
        throw new Error('double bind', symbol);
      } else if (node.expression["function"] != null) {
        expected = parentScope.getScopedType(expression["function"].data);
        if (expected === void 0) {
          return parentScope.setType(symbol, 'Any');
        } else if (assigned_type === (expected != null ? expected.returns : void 0)) {
          return parentScope.setType(symbol, assigned_type);
        } else {
          throw new Error("'" + symbol + "' is expected to " + assigned_type + " indeed " + expected + ", by function call");
        }
      } else if (registered_type != null) {
        if (symbol === 'toString') {
          return '';
        } else if (!((registered_type === infered_type) || (registered_type === 'Any'))) {
          throw new Error("'" + symbol + "' is expected to " + registered_type + " indeed " + infered_type + ", by assignee");
        }
      } else if (assigned_type) {
        console.log('assigned', node);
        if (assigned_type === 'Any') {
          return parentScope.setType(symbol, 'Any');
        } else if (assignee.annotation.type.type === 'Function') {
          return parentScope.setType(symbol, assignee.annotation.type);
        } else if ((typeof assigned_type) === 'object') {
          return parentScope.setType(symbol, assignee.annotation.type);
        } else if (assigned_type === infered_type) {
          parentScope.setType(symbol, assignee.annotation.type);
          if (infered_type === 'Function') {
            fnode = new ScopeNode;
            fnode.name = symbol;
            fnode.parent = parentScope;
            node.expression.parameters.map(function(param) {
              var _ref2, _ref3;
              return fnode.setType(param.data, (_ref2 = (_ref3 = param.annotation) != null ? _ref3.type : void 0) != null ? _ref2 : 'Any');
            });
            parentScope.nodes.push(fnode);
            return _typecheck(node.expression.body.statements, fnode);
          }
        } else {
          if (symbol === 'toString') {
            return;
          }
          throw new Error("'" + symbol + "' is expected to " + assignee.annotation.type + " indeed " + infered_type);
        }
      } else {
        parentScope.setType(symbol, 'Any');
        if (infered_type === 'Function' && (((_ref2 = node.expression.body) != null ? _ref2.statements : void 0) != null)) {
          fnode = new ScopeNode;
          fnode.name = symbol;
          fnode.parent = parentScope;
          parentScope.nodes.push(fnode);
          return _typecheck(node.expression.body.statements, fnode);
        }
      }
    }
  };

  module.exports = {
    checkNodes: checkNodes
  };

}).call(this);
