// Generated by CoffeeScript 2.0.0-beta8-dev
var _typecheck, checkNodes, console, guess_expr_type, ScopeNode, TypeSymbol;
console = {
  log: function () {
  }
};
guess_expr_type = function (expr) {
  if (typeof expr.data === 'number') {
    return 'Number';
  } else if (typeof expr.data === 'string') {
    return 'String';
  } else if (typeof expr.data === 'boolean') {
    return 'Boolean';
  } else if (null != expr.parameters && null != expr.body) {
    return 'Function';
  } else {
    return 'Any';
  }
};
TypeSymbol = function () {
  function TypeSymbol(param$) {
    var cache$;
    {
      cache$ = param$;
      this.type = cache$.type;
      this.implicit = cache$.implicit;
    }
  }
  return TypeSymbol;
}();
ScopeNode = function () {
  function ScopeNode() {
    this.name = '';
    this.nodes = [];
    this._defs = {};
    this.parent = null;
  }
  ScopeNode.prototype.setType = function (symbol, type, implicit) {
    if (null == implicit)
      implicit = true;
    return this._defs[symbol] = new TypeSymbol({
      type: type,
      implicit: implicit
    });
  };
  ScopeNode.prototype.getType = function (symbol) {
    return null != (null != this._defs[symbol] ? this._defs[symbol].type : void 0) ? null != this._defs[symbol] ? this._defs[symbol].type : void 0 : void 0;
  };
  ScopeNode.prototype.getScopedType = function (symbol) {
    return this.getType(symbol) || (null != this.parent ? this.parent.getScopedType(symbol) : void 0) || void 0;
  };
  ScopeNode.dump = function (node, prefix) {
    var key, val;
    if (null == prefix)
      prefix = '';
    console.log(prefix + ('[' + node.name + ']'));
    for (key in node._defs) {
      val = node._defs[key];
      console.log(prefix, ' +', key, '::', val);
    }
    return function (accum$) {
      var next;
      for (var i$ = 0, length$ = node.nodes.length; i$ < length$; ++i$) {
        next = node.nodes[i$];
        accum$.push(ScopeNode.dump(next, prefix + '  '));
      }
      return accum$;
    }.call(this, []);
  };
  return ScopeNode;
}();
checkNodes = function (cs_ast) {
  var i, root;
  if (!(null != (null != cs_ast.body ? cs_ast.body.statements : void 0)))
    return;
  console.log(cs_ast.body.statements);
  console.log('=====================');
  root = new ScopeNode;
  root.name = 'root';
  for (var cache$ = [
        'global',
        'exports',
        'Module',
        'module'
      ], i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
    i = cache$[i$];
    root.setType(i, 'Any', true);
  }
  _typecheck(cs_ast.body.statements, root);
  return ScopeNode.dump(root);
};
_typecheck = function (node, parentScope) {
  var assigned_type, assignee, body, cache$, cache$1, expected, expression, fnode, infered_type, member, name, registered_type, snode, symbol, type;
  if (node === void 0)
    return;
  if (null != node.length) {
    node.forEach(function (s) {
      return _typecheck(s, parentScope);
    });
    return;
  } else if (guess_expr_type(node) === 'Function') {
    body = node.body;
    snode = new ScopeNode;
    snode.name = '-lambda-';
    snode.parent = parentScope;
    parentScope.nodes.push(snode);
    return _typecheck(body.statements, snode);
  } else if (null != node.nameAssignee && null != node.body) {
    cache$ = node;
    body = cache$.body;
    name = cache$.name;
    snode = new ScopeNode;
    snode.name = name.data;
    snode.parent = parentScope;
    parentScope.nodes.push(snode);
    return _typecheck(body.statements, snode);
  } else if (null != node['function'] && null != node['arguments']) {
    return _typecheck(node['arguments'], parentScope);
  } else if (null != (null != node.assignee ? node.assignee.memberName : void 0) && null != node.expression) {
    symbol = node.assignee.expression.data;
    member = node.assignee.memberName;
    registered_type = parentScope.getScopedType(symbol);
    if (!(null != registered_type))
      return;
    type = registered_type[member];
    infered_type = guess_expr_type(node.expression);
    if (null != type && type === infered_type || registered_type === 'Any') {
      return '';
    } else {
      throw new Error("'" + symbol + "' is expected to " + registered_type + ' (indeed ' + infered_type + ') at member access');
    }
  } else if (null != node.assignee && null != node.expression) {
    cache$1 = node;
    assignee = cache$1.assignee;
    expression = cache$1.expression;
    symbol = assignee.data;
    registered_type = parentScope.getScopedType(symbol);
    infered_type = guess_expr_type(expression);
    assigned_type = null != assignee.annotation ? assignee.annotation.type : void 0;
    if (null != registered_type && null != assigned_type) {
      throw new Error('double bind', symbol);
    } else if (null != node.expression['function']) {
      expected = parentScope.getScopedType(expression['function'].data);
      if (expected === void 0) {
        return parentScope.setType(symbol, 'Any');
      } else if (assigned_type === (null != expected ? expected.returns : void 0)) {
        return parentScope.setType(symbol, assigned_type);
      } else {
        throw new Error("'" + symbol + "' is expected to " + assigned_type + ' indeed ' + expected + ', by function call');
      }
    } else if (null != registered_type) {
      if (symbol === 'toString') {
        return '';
      } else if (!(registered_type === infered_type || registered_type === 'Any')) {
        throw new Error("'" + symbol + "' is expected to " + registered_type + ' indeed ' + infered_type + ', by assignee');
      }
    } else if (assigned_type) {
      if (assigned_type === 'Any') {
        return parentScope.setType(symbol, 'Any');
      } else if (assignee.annotation.type.type === 'Function') {
        return parentScope.setType(symbol, assignee.annotation.type);
      } else if (typeof assigned_type === 'object') {
        return parentScope.setType(symbol, assignee.annotation.type);
      } else if (assigned_type === infered_type) {
        parentScope.setType(symbol, assignee.annotation.type);
        if (infered_type === 'Function') {
          fnode = new ScopeNode;
          fnode.name = symbol;
          fnode.parent = parentScope;
          node.expression.parameters.map(function (param) {
            return fnode.setType(param.data, null != (null != param.annotation ? param.annotation.type : void 0) ? null != param.annotation ? param.annotation.type : void 0 : 'Any');
          });
          parentScope.nodes.push(fnode);
          return _typecheck(node.expression.body.statements, fnode);
        }
      } else {
        if (symbol === 'toString')
          return;
        throw new Error("'" + symbol + "' is expected to " + assignee.annotation.type + ' indeed ' + infered_type);
      }
    } else {
      parentScope.setType(symbol, 'Any');
      if (infered_type === 'Function' && null != (null != node.expression.body ? node.expression.body.statements : void 0)) {
        fnode = new ScopeNode;
        fnode.name = symbol;
        fnode.parent = parentScope;
        parentScope.nodes.push(fnode);
        return _typecheck(node.expression.body.statements, fnode);
      }
    }
  }
};
module.exports = { checkNodes: checkNodes };
