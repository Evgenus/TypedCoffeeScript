// Generated by CoffeeScript 2.0.0-beta8-dev
var checkAcceptableObject, checkNodes, console, CS, initializeGlobalTypes, render, render, Scope, TypeSymbol, VarSymbol, walk;
console = {
  log: function () {
  }
};
render = function () {
  try {
    return require('prettyjson');
  } catch (e$) {
    return;
  }
}.call(this).render;
if (null != render)
  render;
else
  render = function () {
  };
CS = require('./nodes');
checkNodes = function (cs_ast) {
  var i, root;
  if (!(null != (null != cs_ast.body ? cs_ast.body.statements : void 0)))
    return;
  console.log('AST ==================');
  console.log(render(cs_ast));
  console.log('================== AST');
  root = new Scope;
  root.name = 'root';
  for (var cache$ = [
        'global',
        'exports',
        'module'
      ], i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
    i = cache$[i$];
    root.addVar(i, 'Any', true);
  }
  initializeGlobalTypes(root);
  walk(cs_ast.body.statements, root);
  return console.log('finish ================== checkNodes');
};
checkAcceptableObject = function (left, right) {
  console.log(left, right);
  if (typeof left === 'string' && typeof right === 'string') {
    if (left === right || left === 'Any' || right === 'Any') {
      return 'ok';
    } else {
      throw new Error('object deep equal mismatch ' + left + ', ' + right);
    }
  } else if (null != (null != left ? left.array : void 0)) {
    console.log('leftb', left);
    return console.log(right);
  } else if (typeof left === 'object' && typeof right === 'object') {
    return function (accum$) {
      var key, lval;
      for (key in left) {
        lval = left[key];
        if (right[key] === void 0)
          throw new Error("'" + key + "' is not defined on right");
        accum$.push(checkAcceptableObject(lval, right[key]));
      }
      return accum$;
    }.call(this, []);
  } else if (left === void 0 || right === void 0) {
    return 'ignore now';
  } else {
    throw new Error('object deep equal mismatch ' + left + ', ' + right);
  }
};
initializeGlobalTypes = function (node) {
  node.addTypeObject('String', new TypeSymbol({
    type: 'String',
    'instanceof': function (expr) {
      return typeof expr.data === 'string';
    }
  }));
  node.addTypeObject('Number', new TypeSymbol({
    type: 'Number',
    'instanceof': function (expr) {
      return typeof expr.data === 'number';
    }
  }));
  node.addTypeObject('Boolean', new TypeSymbol({
    type: 'Boolean',
    'instanceof': function (expr) {
      return typeof expr.data === 'boolean';
    }
  }));
  node.addTypeObject('Object', new TypeSymbol({
    type: 'Object',
    'instanceof': function (expr) {
      return typeof expr.data === 'object';
    }
  }));
  node.addTypeObject('Array', new TypeSymbol({
    type: 'Array',
    'instanceof': function (expr) {
      return typeof expr.data === 'object';
    }
  }));
  return node.addTypeObject('Any', new TypeSymbol({
    type: 'Any',
    'instanceof': function (expr) {
      return true;
    }
  }));
};
VarSymbol = function () {
  function VarSymbol(param$) {
    var cache$;
    {
      cache$ = param$;
      this.type = cache$.type;
      this.implicit = cache$.implicit;
    }
  }
  return VarSymbol;
}();
TypeSymbol = function () {
  function TypeSymbol(param$) {
    var cache$;
    {
      cache$ = param$;
      this.type = cache$.type;
      this['instanceof'] = cache$['instanceof'];
    }
    if (null != this['instanceof'])
      this['instanceof'];
    else
      this['instanceof'] = function (t) {
        return t instanceof this.constructor;
      };
  }
  return TypeSymbol;
}();
Scope = function () {
  function Scope(param$) {
    if (null == param$)
      param$ = null;
    this.parent = param$;
    if (null != this.parent)
      this.parent.nodes.push(this);
    this.name = '';
    this.nodes = [];
    this._vars = {};
    this._types = {};
    this._this = null;
  }
  Scope.prototype.addType = function (symbol, type) {
    return this._types[symbol] = new TypeSymbol({ type: type });
  };
  Scope.prototype.addTypeObject = function (symbol, type_object) {
    return this._types[symbol] = type_object;
  };
  Scope.prototype.getType = function (symbol) {
    return null != (null != this._types[symbol] ? this._types[symbol].type : void 0) ? null != this._types[symbol] ? this._types[symbol].type : void 0 : void 0;
  };
  Scope.prototype.getTypeInScope = function (symbol) {
    return this.getType(symbol) || (null != this.parent ? this.parent.getTypeInScope(symbol) : void 0) || void 0;
  };
  Scope.prototype.addVar = function (symbol, type, implicit) {
    if (null == implicit)
      implicit = true;
    return this._vars[symbol] = new VarSymbol({
      type: type,
      implicit: implicit
    });
  };
  Scope.prototype.getVar = function (symbol) {
    return null != (null != this._vars[symbol] ? this._vars[symbol].type : void 0) ? null != this._vars[symbol] ? this._vars[symbol].type : void 0 : void 0;
  };
  Scope.prototype.getVarInScope = function (symbol) {
    return this.getVar(symbol) || (null != this.parent ? this.parent.getVarInScope(symbol) : void 0) || void 0;
  };
  Scope.prototype.isImplicitVar = function (symbol) {
    return !!(null != this._vars[symbol] ? this._vars[symbol].implicit : void 0);
  };
  Scope.prototype.isImplicitVarInScope = function (symbol) {
    return this.isImplicitVar(symbol) || (null != this.parent ? this.parent.isImplicitVarInScope(symbol) : void 0) || void 0;
  };
  Scope.prototype.extendTypeLiteral = function (node) {
    var key, ret, type, val;
    switch (typeof node) {
    case 'object':
      if (node instanceof Array) {
        return function (accum$) {
          var i;
          for (var i$ = 0, length$ = node.length; i$ < length$; ++i$) {
            i = node[i$];
            accum$.push(this.extendTypeLiteral(i));
          }
          return accum$;
        }.call(this, []);
      } else {
        ret = {};
        for (key in node) {
          val = node[key];
          ret[key] = this.extendTypeLiteral(val);
        }
        return ret;
      }
    case 'string':
      type = this.getTypeInScope(node);
      switch (typeof type) {
      case 'object':
        return this.extendTypeLiteral(type);
      case 'string':
        return type;
      }
    }
  };
  Scope.prototype.checkFunctionLiteral = function (left, right) {
    var i, l_arg, r_arg;
    left = this.extendTypeLiteral(left);
    right = this.extendTypeLiteral(right);
    for (var i$ = 0, length$ = left.args.length; i$ < length$; ++i$) {
      l_arg = left.args[i$];
      i = i$;
      r_arg = right.args[i];
      checkAcceptableObject(l_arg, r_arg);
    }
    return checkAcceptableObject(left.returns, right.returns);
  };
  Scope.prototype.checkArrayLiteral = function (left, right) {
    var i, l_arg, r_arg;
    left = this.extendTypeLiteral(left);
    right = this.extendTypeLiteral(right);
    for (var i$ = 0, length$ = left.args.length; i$ < length$; ++i$) {
      l_arg = left.args[i$];
      i = i$;
      r_arg = right.args[i];
      checkAcceptableObject(l_arg, r_arg);
    }
    return checkAcceptableObject(left.returns, right.returns);
  };
  Scope.dump = function (node, prefix) {
    var key, val;
    if (null == prefix)
      prefix = '';
    console.log(prefix + ('[' + node.name + ']'));
    for (key in node._vars) {
      val = node._vars[key];
      console.log(prefix, ' +', key, '::', val);
    }
    return function (accum$) {
      var next;
      for (var i$ = 0, length$ = node.nodes.length; i$ < length$; ++i$) {
        next = node.nodes[i$];
        accum$.push(Scope.dump(next, prefix + '  '));
      }
      return accum$;
    }.call(this, []);
  };
  return Scope;
}();
walk = function (node, currentScope) {
  var args, assigning, cache$, cache$1, el, expected, expression, infered, key, left, nextScope, obj, objectScope, registered, right, symbol, target_type;
  switch (false) {
  case !(node === void 0):
    return;
  case !(null != node.length):
    return node.forEach(function (s) {
      return walk(s, currentScope);
    });
  case !(node.type === 'struct'):
    return currentScope.addType(node.name, node.expr);
  case !node['instanceof'](CS.Program):
    walk(node.body.statements, currentScope);
    return node.annotation = { type: 'Program' };
  case !node['instanceof'](CS.String):
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: 'String',
        implicit: true,
        primitive: true
      };
  case !node['instanceof'](CS.Bool):
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: 'Boolean',
        implicit: true,
        primitive: true
      };
  case !node['instanceof'](CS.Numbers):
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: 'Number',
        implicit: true,
        primitive: true
      };
  case !node['instanceof'](CS.Identifier):
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: (cache$ = currentScope.getVar(node.data), null != cache$ ? cache$ : 'Any'),
        implicit: true
      };
  case !node['instanceof'](CS.ArrayInitialiser):
    walk(node.members, currentScope);
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: {
          array: node.members.map(function (m) {
            return null != m.annotation ? m.annotation.type : void 0;
          })
        },
        implicit: true
      };
  case !node['instanceof'](CS.ObjectInitialiser):
    obj = {};
    nextScope = new Scope(currentScope);
    nextScope.name = 'object';
    for (var i$ = 0, length$ = node.members.length; i$ < length$; ++i$) {
      {
        cache$1 = node.members[i$];
        expression = cache$1.expression;
        key = cache$1.key;
      }
      if (!('undefined' !== typeof key && null != key))
        continue;
      walk(expression, nextScope);
      obj[key.data] = null != expression.annotation ? expression.annotation.type : void 0;
    }
    if (null != node.annotation)
      return node.annotation;
    else
      return node.annotation = {
        type: obj,
        implicit: true
      };
  case !node['instanceof'](CS.Class):
    return walk(node.body.statements, new Scope(currentScope));
  case !node['instanceof'](CS.Function):
    args = node.parameters.map(function (param) {
      return null != (null != param.annotation ? param.annotation.type : void 0) ? null != param.annotation ? param.annotation.type : void 0 : 'Any';
    });
    node.annotation.type.args = args;
    objectScope = new Scope(currentScope);
    objectScope.name = '-lambda-';
    node.parameters.map(function (param) {
      try {
        if ('function' === typeof objectScope.addVar)
          return objectScope.addVar(param.data, null != (null != param.annotation ? param.annotation.type : void 0) ? null != param.annotation ? param.annotation.type : void 0 : 'Any');
      } catch (e$) {
        return 'ignore but brake on somewhere. why?';
      }
    });
    return walk(null != node.body ? node.body.statements : void 0, objectScope);
  case !node['instanceof'](CS.FunctionApplication):
    walk(node['arguments'], currentScope);
    expected = currentScope.getVarInScope(node['function'].data);
    if (null != expected && expected !== 'Any') {
      args = null != node['arguments'] ? node['arguments'].map(function (arg) {
        return null != arg.annotation ? arg.annotation.type : void 0;
      }) : void 0;
      currentScope.checkFunctionLiteral(expected, {
        args: args,
        returns: 'Any'
      });
      if (null != node.annotation)
        return node.annotation;
      else
        return node.annotation = {
          type: expected.returns,
          implicit: true
        };
    }
  case !node['instanceof'](CS.AssignOp):
    left = node.assignee;
    right = node.expression;
    walk(right, currentScope);
    if (!(null != left))
      return;
    if (null != left.memberName) {
      symbol = left.expression.data;
      registered = currentScope.getVarInScope(symbol);
      if (!(null != registered))
        return;
      expected = registered[left.memberName];
      infered = null != right.annotation ? right.annotation.type : void 0;
      if (null != expected && expected === infered || registered === 'Any') {
        '';
      } else {
        throw new Error("'" + symbol + "' is expected to " + registered + ' (indeed ' + infered + ') at member access');
      }
    }
    symbol = left.data;
    registered = currentScope.getVarInScope(symbol);
    infered = null != right.annotation ? right.annotation.type : void 0;
    assigning = null != left.annotation ? currentScope.extendTypeLiteral(left.annotation.type) : void 0;
    if (null != assigning && null != registered) {
      throw new Error('double bind: ' + symbol);
    } else if (null != registered) {
      if (symbol === 'toString')
        return;
      if (!(registered === infered || registered === 'Any'))
        throw new Error("'" + symbol + "' is expected to " + registered + ' indeed ' + infered + ', by assignee');
    } else if (null != assigning) {
      if (assigning === 'Any') {
        return currentScope.addVar(symbol, 'Any', true);
      } else if (null != (null != right.annotation ? right.annotation.type.array : void 0)) {
        for (var i$1 = 0, length$1 = right.annotation.type.array.length; i$1 < length$1; ++i$1) {
          el = right.annotation.type.array[i$1];
          target_type = currentScope.extendTypeLiteral(el);
          checkAcceptableObject(assigning.array, target_type);
        }
        return currentScope.addVar(symbol, 'Any', true);
      } else if (null != left.annotation.type.args && null != right.annotation.type.args) {
        if (right['instanceof'](CS.Function)) {
          currentScope.checkFunctionLiteral(left.annotation.type, right.annotation.type);
        } else {
          throw new Error('Right is not function');
        }
        return currentScope.addVar(symbol, left.annotation.type);
      } else if (typeof assigning === 'object') {
        checkAcceptableObject(assigning, right.annotation.type);
        return currentScope.addVar(symbol, left.annotation.type, false);
      } else if (assigning === infered) {
        return currentScope.addVar(symbol, left.annotation.type);
      } else {
        if (symbol === 'toString')
          return;
        throw new Error("'" + symbol + "' is expected to " + left.annotation.type + ' indeed ' + infered);
      }
    } else {
      return currentScope.addVar(symbol, 'Any');
    }
  }
};
module.exports = { checkNodes: checkNodes };
