{"name":"TypedCoffeeScript","tagline":"CoffeeScript Compiler with Type Interfaces","body":"\r\n## Concept\r\n\r\n* Allow to compile all coffee-script\r\n* Optional type and restrict member access under definition\r\n* Easy to add type to symbol from the middle of development\r\n* Easy to replace coffee-script\r\n* Check type againt cscodegen AST, not in compiler\r\n\r\n## Examples\r\n\r\n```coffeescript\r\n# define struct\r\nstruct Point {\r\n  x :: Number\r\n  y :: Number\r\n}\r\n\r\n# structure\r\np :: Point = {x: 3, y: 3}\r\nline :: Point[] = [{x: 3, y: 4}, {x: 8, y: 5}, p]\r\n\r\n# typed function\r\nf1 :: Number -> Number = (n) ->  n * n\r\nf2 = (n :: Number) ->  n * n\r\n\r\n# pre-defined symbol\r\nf3 :: Number -> Number\r\nf3 = (n) ->  n * n\r\n\r\n# generics\r\nstruct Hash<K, V> {\r\n  get :: K -> V\r\n  set :: K * V -> ()\r\n}\r\nhash :: Hash<String, Number> = {\r\n  get: (key) -> @[key]\r\n  set: (key, val) -> @[key] = val\r\n}\r\nhash.set \"a\", 1\r\nnum :: Number = hash.get \"a\"\r\n\r\n# class property field\r\nclass X\r\n  num :: Number\r\n  f :: Number -> Number\r\n  f: (n) ->\r\n    @num = n\r\nx :: X = new X\r\nx.f 3","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}